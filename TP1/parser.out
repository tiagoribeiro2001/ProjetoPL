Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> language
Rule 1     language -> expression
Rule 2     language -> interval
Rule 3     language -> size
Rule 4     language -> function
Rule 5     language -> empty
Rule 6     expression -> ID COMA
Rule 7     interval -> LBRACE INT COMA INT RBRACE
Rule 8     size -> LBRACE INT RBRACE
Rule 9     function -> DCOLON ID
Rule 10    empty -> <empty>

Terminals, with rules where they appear

COMA                 : 6 7
DCOLON               : 9
ID                   : 6 9
INT                  : 7 7 8
LBRACE               : 7 8
RBRACE               : 7 8
error                : 

Nonterminals, with rules where they appear

empty                : 5
expression           : 1
function             : 4
interval             : 2
language             : 0
size                 : 3

Parsing method: LALR

state 0

    (0) S' -> . language
    (1) language -> . expression
    (2) language -> . interval
    (3) language -> . size
    (4) language -> . function
    (5) language -> . empty
    (6) expression -> . ID COMA
    (7) interval -> . LBRACE INT COMA INT RBRACE
    (8) size -> . LBRACE INT RBRACE
    (9) function -> . DCOLON ID
    (10) empty -> .

    ID              shift and go to state 7
    LBRACE          shift and go to state 8
    DCOLON          shift and go to state 9
    $end            reduce using rule 10 (empty -> .)

    language                       shift and go to state 1
    expression                     shift and go to state 2
    interval                       shift and go to state 3
    size                           shift and go to state 4
    function                       shift and go to state 5
    empty                          shift and go to state 6

state 1

    (0) S' -> language .



state 2

    (1) language -> expression .

    $end            reduce using rule 1 (language -> expression .)


state 3

    (2) language -> interval .

    $end            reduce using rule 2 (language -> interval .)


state 4

    (3) language -> size .

    $end            reduce using rule 3 (language -> size .)


state 5

    (4) language -> function .

    $end            reduce using rule 4 (language -> function .)


state 6

    (5) language -> empty .

    $end            reduce using rule 5 (language -> empty .)


state 7

    (6) expression -> ID . COMA

    COMA            shift and go to state 10


state 8

    (7) interval -> LBRACE . INT COMA INT RBRACE
    (8) size -> LBRACE . INT RBRACE

    INT             shift and go to state 11


state 9

    (9) function -> DCOLON . ID

    ID              shift and go to state 12


state 10

    (6) expression -> ID COMA .

    $end            reduce using rule 6 (expression -> ID COMA .)


state 11

    (7) interval -> LBRACE INT . COMA INT RBRACE
    (8) size -> LBRACE INT . RBRACE

    COMA            shift and go to state 13
    RBRACE          shift and go to state 14


state 12

    (9) function -> DCOLON ID .

    $end            reduce using rule 9 (function -> DCOLON ID .)


state 13

    (7) interval -> LBRACE INT COMA . INT RBRACE

    INT             shift and go to state 15


state 14

    (8) size -> LBRACE INT RBRACE .

    $end            reduce using rule 8 (size -> LBRACE INT RBRACE .)


state 15

    (7) interval -> LBRACE INT COMA INT . RBRACE

    RBRACE          shift and go to state 16


state 16

    (7) interval -> LBRACE INT COMA INT RBRACE .

    $end            reduce using rule 7 (interval -> LBRACE INT COMA INT RBRACE .)

